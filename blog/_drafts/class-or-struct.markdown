Swift has two options for complex data types that support `private` internal variables: `struct` or `class`. My hueristic for choosing between these two is this: If I change one of the properties of this type, would I consider it to be fundamentally distinct from the original? If so, it's a `struct`. If not, it's `class`. For example, consider a type `Color`, with `r`, `g`, and `b` properties. If I change one of those properties significantly most people would say that I've created an entirely distinct `Color`. Therefore, `Color` is a `struct`. Now consider a type `PaintBucket`, which has a `color` and a `paintRemaining`. If I `addDye()` to the bucket to change the `color`, most people would say the the bucket itself remains unchanged. Even if I `pourPaint()` to lower the `paintRemaining`, the `PaintBucket` is not distinct. Therefore `PaintBucket` is a `class`.
